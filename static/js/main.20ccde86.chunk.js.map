{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","query","handleChange","getNewMovie","addNewMovie","notFoundMovie","finished","showErrorMessage","onSubmit","htmlFor","type","id","placeholder","value","onChange","classNames","disabled","Boolean","length","onClick","getMovie","fetch","then","res","json","catch","Response","Error","App","useState","setMovies","setQuery","setMovie","setNotFoundMovie","setFinished","setShowErrorMessage","e","a","preventDefault","response","Poster","Title","Plot","imdbID","target","exist","some","el","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.20ccde86.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={\n            movie.imgUrl\n          }\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","// import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport React from 'react';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  query: string\n  movie: Movie | null\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n  getNewMovie: (e: React.FormEvent) => void\n  addNewMovie: () => void\n  notFoundMovie: boolean\n  finished: boolean\n  showErrorMessage: boolean\n};\n\nexport const FindMovie: React.FC<Props> = (\n  {\n    query,\n    movie,\n    handleChange,\n    getNewMovie,\n    addNewMovie,\n    notFoundMovie,\n    finished,\n    showErrorMessage,\n  },\n) => {\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={getNewMovie}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={handleChange}\n            />\n          </div>\n\n          {notFoundMovie && query && showErrorMessage && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames('button', 'is-light', {\n                'is-loading': !finished,\n              })}\n              disabled={Boolean(!query.length)}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {Boolean(movie) && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={addNewMovie}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie !== null && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=98b99292';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\nimport { getMovie } from './api';\nimport { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [query, setQuery] = useState<string>('');\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [notFoundMovie, setNotFoundMovie] = useState(false);\n  const [finished, setFinished] = useState(true);\n  const [showErrorMessage, setShowErrorMessage] = useState(false);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(e.target.value);\n    setShowErrorMessage(false);\n  };\n\n  const getNewMovie = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setNotFoundMovie(true);\n    setFinished(false);\n\n    try {\n      if (!query) {\n        return;\n      }\n\n      const response: MovieData | ResponseError = await getMovie(query);\n\n      if ('Error' in response) {\n        setFinished(true);\n        setShowErrorMessage(true);\n\n        return;\n      }\n\n      setFinished(true);\n\n      const {\n        Poster,\n        Title,\n        Plot,\n        imdbID,\n      } = response;\n\n      const imdbUrl = `https://www.imdb.com/title/${imdbID}`;\n\n      setMovie({\n        title: Title,\n        description: Plot,\n        imgUrl: Poster === 'N/A'\n          ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n          : Poster,\n        imdbUrl,\n        imdbId: imdbID,\n      });\n      setNotFoundMovie(false);\n      setShowErrorMessage(false);\n    } catch {\n      throw new Error('error');\n    }\n  };\n\n  const addNewMovie = () => {\n    if (movie !== null) {\n      const exist = movies.some((el) => el.title === movie.title);\n\n      if (exist) {\n        setMovies([...movies]);\n      } else {\n        setMovies([...movies, movie]);\n      }\n\n      setMovie(null);\n      setQuery('');\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          query={query}\n          movie={movie}\n          handleChange={handleChange}\n          getNewMovie={getNewMovie}\n          addNewMovie={addNewMovie}\n          notFoundMovie={notFoundMovie}\n          finished={finished}\n          showErrorMessage={showErrorMessage}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}