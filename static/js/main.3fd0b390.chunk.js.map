{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","App.tsx","api.ts","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","hasQuery","handleChange","getNewMovie","addNewMovie","isFoundMovie","isLoading","isErrorMessage","searchButton","onSubmit","htmlFor","type","id","placeholder","value","onChange","classNames","disabled","length","onClick","App","useState","setMovies","setHasQuery","setMovie","setIsFoundMovie","setIsLoading","setIsErrorMessage","e","a","preventDefault","query","fetch","then","res","json","catch","Response","Error","response","Poster","Title","Plot","imdbID","target","exist","some","el","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3fd0b390.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={\n            movie.imgUrl\n          }\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","// import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport React from 'react';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  hasQuery: string\n  movie: Movie | null\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n  getNewMovie: (e: React.FormEvent) => void\n  addNewMovie: () => void\n  isFoundMovie: boolean\n  isLoading: boolean\n  isErrorMessage: boolean\n};\n\nexport const FindMovie: React.FC<Props> = ({\n  hasQuery,\n  movie,\n  handleChange,\n  getNewMovie,\n  addNewMovie,\n  isFoundMovie,\n  isLoading,\n  isErrorMessage,\n}) => {\n  const searchButton = movie\n    ? 'Search again'\n    : 'Find a movie';\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={getNewMovie}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={hasQuery}\n              onChange={handleChange}\n            />\n          </div>\n\n          {!isFoundMovie && hasQuery && isErrorMessage && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames('button', 'is-light', {\n                'is-loading': isLoading,\n              })}\n              disabled={!hasQuery.length}\n            >\n              {searchButton}\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={addNewMovie}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\nimport { getMovie } from './api';\nimport { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [hasQuery, setHasQuery] = useState<string>('');\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [isFoundMovie, setIsFoundMovie] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isErrorMessage, setIsErrorMessage] = useState(false);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setHasQuery(e.target.value);\n    setIsErrorMessage(false);\n  };\n\n  const getNewMovie = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      if (!hasQuery) {\n        return;\n      }\n\n      const response: MovieData | ResponseError = await getMovie(hasQuery);\n\n      if ('Error' in response) {\n        setIsLoading(false);\n        setIsErrorMessage(true);\n        setIsFoundMovie(false);\n\n        return;\n      }\n\n      const {\n        Poster,\n        Title,\n        Plot,\n        imdbID,\n      } = response;\n\n      const imdbUrl = `https://www.imdb.com/title/${imdbID}`;\n\n      setMovie({\n        title: Title,\n        description: Plot,\n        imgUrl: Poster === 'N/A'\n          ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n          : Poster,\n        imdbUrl,\n        imdbId: imdbID,\n      });\n      setIsErrorMessage(false);\n      setIsLoading(false);\n    } catch {\n      throw new Error('error');\n    }\n  };\n\n  const addNewMovie = () => {\n    if (movie) {\n      const exist = movies.some((el) => el.title === movie.title);\n\n      if (exist) {\n        setMovies([...movies]);\n      } else {\n        setMovies([...movies, movie]);\n      }\n\n      setMovie(null);\n      setHasQuery('');\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          hasQuery={hasQuery}\n          movie={movie}\n          handleChange={handleChange}\n          getNewMovie={getNewMovie}\n          addNewMovie={addNewMovie}\n          isFoundMovie={isFoundMovie}\n          isLoading={isLoading}\n          isErrorMessage={isErrorMessage}\n        />\n      </div>\n    </div>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=98b99292';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}